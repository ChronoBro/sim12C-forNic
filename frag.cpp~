#include "frag.h"



float const CFrag::pi=acos(-1.);
CRandom CFrag::ran;


CFrag::CFrag(float Z0,float mass0, string filename, float CsI_res0,
	     float thickness, string thresFile):fragment(Z0,mass0)

{
  ifstream file(thresFile.c_str());
  if (file.bad())
    {
      cout << "bad thres" << endl;
      for (int i=0;i<56;i++) thres[i] = 0.;
    }
  else 
    {
      cout << "good thres"  << endl;
      int ii;
      float ff;
     for (int i=0;i<56;i++)
       {
         file >> ii >> ff;
         thres[ii] = ff;
       }
    }
  loss = new CLoss(filename,mass);
  CsI_res = CsI_res0;
  //be9 target  
  float thick = thickness/1000./9.*6.02e23; // atoms/ cem2
  multScat = new CMultScat((int)Z,4,thick);

  float fromCenter = 27.2;//35.;
  float radius = 63.; //50.;
  Array = new CArray(radius,fromCenter,6.42,7.6);
  shadowArray = new CArray(radius+2.,fromCenter,7.4,8.2);
  real = new CFrame(mass);
  recon = new CFrame(mass);

  Pixels.prepareSim();


  // Ring = new ring(170.,7.5,62.5,128,128); //S4 detector
   // RingCsI = new ring(190.,7.5,62.5,128,128);
  Ring = new ring(149,15.,42.5,32,64);//new ring(149.,15.,42.5,32,64); //Russian detector
  RingCsI = new ring(173.4,14.5,49.5,32,64);//(170,14.5,46// distance from interaction, min active radius, max active radius, number of rings, number of pie sections
  Ring2 = new ring(354.,11.,35.,48,16); //354 is distance used in analysis
  Ring2->S2=1;
  Ring2CsI = new ring(381.1,10.,40.,48,16); // (381.1,11
  Ring2CsI->S2=1;
  TTT = new ttt(250.,-pi/13.5,100.,100.,0.,128,128);// distance from interaction, angle offset from beam axis in z-y plane, horizontal active radius, vertical active radius, horizontal offset, number of y-divisions, number of x-divisions
  TTT2= new ttt(250.,pi/13.5,100.,100.,0.,128,128);// back of CsI crystals
  TTT3 = new ttt(252.,-pi/13.5,100.,100.,0.,128,128);
  TTT4 = new ttt(252.,pi/13.5,100.,100.,0.,128,128);
}

/**
 * Constructor
 \param Z0 is the atomic number of fragment
 \param mass0 is mass of fragment in amu
 \param filename specifies the name of the file with energy loss information
 \param CsI_res0 fractional energy resolution of this fragment in CsI
 \param thickness is target thickness in mg/cm2 
*/

CFrag::CFrag(float Z0,float mass0, string filename, float CsI_res0,
	     float thickness):fragment(Z0,mass0)
{
  loss = new CLoss(filename,mass);
  CsI_res = CsI_res0;
  //be9 target  
  float thick = thickness/1000./9.*6.02e23; // atoms/ cem2
  multScat = new CMultScat((int)Z,4,thick);

  float fromCenter = 27.2;//35.;
  float radius = 63.; //50.;
  Array = new CArray(radius,fromCenter,6.42,7.6);
  shadowArray = new CArray(radius+2.,fromCenter,7.4,8.2);
  real = new CFrame(mass);
  recon = new CFrame(mass);

  Pixels.prepareSim();

}
//*********************************************************
/**
*Destructor
*/
CFrag::~CFrag()
{
  delete Array;
  delete real;
  delete recon;
  delete Ring;
   delete TTT;
  delete TTT2;
   delete Ring2;
   delete TTT3;
   delete TTT4;
   delete RingCsI;
   delete Ring2CsI;
}

//**********************************************************
  /**
   * logical function determines if a particle is detected
   */
int CFrag::hit()
{
  is_hit = Array->hit(real->theta,real->phi,(float)0.,(float)0.) ;

  if (is_hit)
    {
     int itower = Array->hitTower;
     int itele = Array->Tower[itower]->hitTele;
     if (itower == 3 && itele == 2 && Array->Tower[itower]->Tele[itele]->ICsI == 1)
       {
         if (ran.Rndm() < .26)
	   {
            is_hit = 0;
            return is_hit;
	   }
        }
    }


  if (is_hit) 
    {

     
      recon->theta = Array->thetaRecon;
      recon->phi = Array->phiRecon;

      recon->energy = real->energy + sqrt(real->energy)*CsI_res*
       ran.Gaus(0.,1.);




     recon->getVelocity();

    }

  return is_hit;
}
//*******************************************************
int CFrag::hitShadow(float xtarget , float ytarget)
{
  is_hit = shadowArray->hit(real->theta,real->phi,xtarget,ytarget) ;

  return is_hit;
}


//**********************************************************
  /**
   * logical function determines if a particle is detected
\param xTarget is in-plane location of interection in target form nomimal center
\param yTarget is out-of-plane location (cm)
  */
int CFrag::hit(float xTarget, float yTarget)
{
  is_hit = Array->hit(real->theta,real->phi,xTarget, yTarget) ;



  if (!is_hit) return is_hit;
  int itower = Array->hitTower;
  int itele = Array->Tower[itower]->hitTele;




   if (itower == 3 && itele == 2 && Array->Tower[itower]->Tele[itele]->ICsI == 1)
       {
         if (ran.Rndm() < .26)
	   {
            is_hit = 0;
            return is_hit;
	   }
        }
   


  if (real->A == 1.)is_hit = protonHole(itower,itele,Array->Tower[itower]->Tele[itele]->ixStrip,31-Array->Tower[itower]->Tele[itele]->iyStrip);
  else is_hit = alphaHole(itower,itele,Array->Tower[itower]->Tele[itele]->ixStrip,31-Array->Tower[itower]->Tele[itele]->iyStrip);

  if (is_hit)
    {
      
      recon->theta = Array->thetaRecon;
      recon->phi = Array->phiRecon;

      //recon->theta = real->theta;
      //recon->phi = real->phi;

     recon->energy = real->energy + sqrt(real->energy)*CsI_res*
       ran.Gaus(0.,1.);


     int idet;
     if (itower == 0) idet = itele;
     else if (itower == 1) idet = itele+2;
     else if (itower == 2) idet = itele+5;
     else if (itower == 3) idet = itele+9;
     else idet = itele+11;

     if(real->energy < thres[idet]) 
       {
	 //cout << "below thres" << endl;
         return false;
       }
 

     
     /*
      recon->theta = real->theta;
      recon->phi = real->phi;
      
      recon->energy = real->energy;
     */
     recon->getVelocity();

    }

  return is_hit;
}


//**********************************************************
  /**
   * logical function determines if a particle is detected
\param xTarget is in-plane location of interection in target form nomimal center
\param yTarget is out-of-plane location (cm)
  */
int CFrag::hit2(float xTarget, float yTarget)
{

  is_hit = Pixels.sim(real->theta,real->phi,xTarget, yTarget,ran.Rndm(),ran.Rndm()) ;


  if (!is_hit) return is_hit;
  int itele = Pixels.hitTele;


   if (itele == 9  && Pixels.ICsI == 0)
       {
         if (ran.Rndm() > .33)
	   {
            is_hit = 0;
            return is_hit;
	   }
        }
   


  if (real->A == 1.)is_hit = protonHole2(itele,Pixels.ixStrip,31-Pixels.iyStrip);
  else is_hit = alphaHole2(itele,Pixels.ixStrip,31-Pixels.iyStrip);

  if (is_hit)
    {
      //threshold
      int idet = 4*itele + Pixels.ICsI;
      //cout << real->energy << " " << thres[idet] << endl;
     if(real->energy < thres[idet]) 
       {
	 //cout << "below thres" << endl;
       return false;
       }

      recon->theta = Pixels.thetaRecon;
      recon->phi = Pixels.phiRecon;

      //recon->theta = real->theta;
      //recon->phi = real->phi;

     recon->energy = real->energy + sqrt(real->energy)*CsI_res*
       ran.Gaus(0.,1.);
     
     /*
      recon->theta = real->theta;
      recon->phi = real->phi;
      
      recon->energy = real->energy;
     */
     recon->getVelocity();

    }

  return is_hit;
}
//******************************************************************
  /**
   * Add a velocity vector to the fragments velocity vector.
   * Used to transform between reference frames
   */
void CFrag::AddVelocity(float *Vplf)
{
  real->transformVelocity(Vplf);
}
//****************************************************************
  /** 
   * returns the energy after the fragment has exited the target
\param thick is the thickness of target that the particle has to traverse (mg/cm2)
  */
float CFrag::Eloss(float thick)
{
  real->energy = loss->getEout(real->energy,thick);
  return real->energy;
}
//*******************************************************************
  /**
   * corrects energy of a detected particle for the energy loss
   * in the target.
\param thick is the thickness of target material though which the particle passed (mg/cm2)
  */
float CFrag::Egain(float thick)
{
  if (thick > 0.)
    recon->energy = loss->getEin(recon->energy,thick/cos(recon->theta));

  recon->getVelocity();

   return recon->energy;
}
//***********************************************
//include multiple scattering
  /**
   * Monte Carlo choice of small angle scattering due to passage through the target
\param fractionalThick is the fractional thick of the target through which the particle passed
  */
void CFrag::MultiScat(float fractionalThick)
{

  float thetaRMS = multScat->thetaRMS(real->energy,fractionalThick);
  float sigma = thetaRMS/sqrt(2.);
  //cout << "thetaRMS= " << thetaRMS << endl;
  float deltaTheta = sqrt(2.)*sigma*sqrt(-log(ran.Rndm()));
  //cout << "deltaTheta= " << deltaTheta << endl;
  float deltaPhi = 2.*pi*ran.Rndm();
  //cout << "delta Phi= " << deltaPhi << endl;

  float x = sin(deltaTheta)*cos(deltaPhi);
  float y = sin(deltaTheta)*sin(deltaPhi);
  float z = cos(deltaTheta);



  //rotate in z-x plane by theta
  float xx = x*cos(real->theta) + z*sin(real->theta);
  float yy = y;
  float zz = z*cos(real->theta) - x*sin(real->theta);


  //rotate in x-y plane
  float xxx = xx*cos(real->phi) - yy*sin(real->phi);
  float yyy = yy*cos(real->phi) + xx*sin(real->phi);
  float zzz = zz;


  float thetaNew = acos(zzz);
  float phiNew = atan2(yyy,xxx);


  real->theta = thetaNew;
  real->phi = phiNew;
}
//*********************
  /**
   * accounts for multiscattering and energy loss in the target
   \param dthick is thickness of target though the particle must pass (mg/cm2)
\param thickness is total target thickness (mg/cm2)
   */
bool CFrag::targetInteraction(float dthick, float thickness)
{
  bool stopped = 0;
  if (dthick == 0.) return stopped;
  float thick = dthick/cos(real->theta);
  Eloss(thick);
  if (real->energy <= 0.) 
    {
      stopped = 1;
      return stopped;
    }
  MultiScat(thick/thickness);
  return stopped;
}
//**************************************************
bool CFrag::protonHole(int itower, int itele, int ifront, int iback)
{


  if (itower == 0 && itele == 1) //det0
    {
      if (iback == 20) return false;
      if (iback == 30) return false;
      if (ifront == 20) return false;
      if (ifront == 30)  return false;

      float x = 1.;

      if (iback == 0) x *= .87;
      if (iback == 15) x *= .74;
      if (iback == 16) x *= .77;
      if (iback == 24) x *= .68;
      if (iback == 31) x *= .88;
      if (ifront == 0) x *= .87;
      if (ifront == 15) x *= .77;
      if (ifront == 16) x *= .77;
      if (ifront == 24) x *= .68;
      if (ifront == 31) x *= .86;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 0 && itele == 0)//det1
    {
      float x = 1.;
      if (iback == 0) x *= .84;
      if (iback == 15) x *= .69;
      if (iback == 16) x *= .88;
      if (iback == 18) x *= .95;
      if (iback == 31) x *= .86;
      if (ifront == 0) x *= .87;
      if (ifront == 14) x *= .85;
      if (ifront == 15) x *= .68;
      if (ifront == 31) x *= .89;
      if (ran.Rndm() > x) return false;
    }

  else if (itower == 1 && itele == 2)//det2
    {
      float x = 1.;
      if (iback == 0) x *= .98;
      if (iback == 15) x *= .80;
      if (iback == 16) x *= .77;
      if (iback == 17) x*= .87;
      if (iback == 31) x*= .92;
      if (ifront == 0) x*= .91;
      if (ifront == 15) x*= .72;
      if (ifront == 16) x*= .88;
      if (ifront == 31) x*=.94;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 1 && itele == 1) //det3
    {
      float x = 1.;
      if (iback == 0) x *= .88;
      if (iback == 15) x*= .67;
      if (iback == 16) x*= .87;
      if (iback == 31) x*= .86;
      if (ifront == 0) x*= .88;
      if (ifront == 15) x*= .68;
      if (ifront == 16) x*= .88;
      if (ifront == 31) x*= .86;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 1 && itele == 0) //det4
    {
      if (iback == 19) return false;
      if (ifront == 19)  return false;
      float x = 1.;
      if (iback == 0) x *= .90;
      if (iback == 15) x*= .66;
      if (iback == 31) x*= .91;
      if (ifront == 0) x*=.91;
      if (ifront == 15) x*=.64;
      if (ifront == 31) x*= .89;
      if (ran.Rndm() > x) return false;

    }
  else if (itower == 2 && itele == 3) //det5
    {
      float x = 1.;
      if (iback == 0) x*= .87;
      if (iback == 16) x*=.71;
      if (iback == 17) x*=.86;
      if (iback == 31) x*=.81;
      if (ifront == 0) x*=.91;
      if (ifront == 14) x*=.96;
      if (ifront == 15) x*=.76;
      if (ifront == 16) x*=.69;
      if (ifront == 31) x*=.91;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 2 && itele == 2) //det 6
    {
      float x = 1.;
      if (iback == 0) x*= .86;
      if (iback == 16) x*=.70;
      if (iback == 31) x*=.72;
      if (ifront == 0) x*=.83;
      if (ifront == 15) x*=.81;
      if (ifront == 16) x*=.71;
      if (ifront == 31) x*=.85;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 2 && itele == 1) //det 7
    {
      if (iback == 4) return false;
      float x = 1.;
      if (iback == 0) x*= .86;
      if (iback == 15) x*=.66;
      if (iback == 16) x*=.85;
      if (iback == 31) x*=.66;
      if (ifront == 0) x*=.86;
      if (ifront == 15) x*=.71;
      if (ifront == 16) x*=.81;
      if (ifront == 31) x*=.83;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 2 && itele == 0) //det 8
    {
      float x = 1.;
      if (iback == 0) x *= .83;
      if (iback == 14) x*=.89;
      if (iback == 15) x*=.66;
      if (iback == 31) x*=.87;
      if (ifront == 0) x*=.86;
      if (iback == 15) x*=.71;
      if (iback == 16) x*=.81;
      if (iback == 31) x*=.83;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 3 && itele == 2) //det 9
    {
      if (iback == 27) return false;
      float x = 1.;
      if (iback == 0) x *= .93;
      if (iback == 15) x*= .78;
      if (iback == 31) x*=.85;
      //if (iback > 15 && ifront < 16) x*=.26;
      if (ifront == 0)x*=.92;
      if (ifront == 31)x*=.95;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 3 && itele == 1) //det 10
    {
      float x = 1.;
      if (iback == 0) x *= .89;
      if (iback == 15) x*= .68;
      if (iback == 16) x*= .81;
      if (iback == 31) x*= .86;
      if (ifront == 0) x*=.89;
      if (ifront == 15) x*=.90;
      if (ifront == 16) x*=.62;
      if (ifront == 17) x*=.94;
      if (ifront == 31) x*=.86;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 3 && itele == 0) //det 11
    {
      float x = 1.;
      if (iback == 0) x*= .87;
      if (iback == 14) x*=.93;
      if (iback == 15) x*=.63;
      if (iback == 16) x*=.94;
      if (iback == 31) x*=.89;
      if (ifront == 0) x*=.92;
      if (ifront == 15) x*=.67;
      if (ifront == 16) x*= .90;
      if (ifront == 31) x*=.91;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 4 && itele == 1) //det 11
    {
      float x = 1.;
      if (iback == 0) x*= .89;
      if (iback == 15) x*= .88;
      if (iback == 16) x*=.75;
      if (iback == 31) x*=.90;
      if (ifront == 0) x*=.92;
      if (ifront == 16) x*=.71;
      if (ifront == 17) x*=.83;
      if (ifront == 31) x*=.84;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 4 && itele == 0) //det 11
    {
      if (iback == 31) return false;
      float x = 1.;
      if (iback == 0) x*=.86;
      if (iback == 9) x*= .42;
      if (iback == 15) x*=.67;
      if (iback == 16) x*=.90;
      if (ifront == 0) x*=.93;
      if (ifront == 16) x*=.68;
      if (ifront == 17) x*=.83;
      if (ifront == 31) x*=.87;
      if (ran.Rndm() > x) return false;
    }

  return true;
}
//********************************************
bool CFrag::alphaHole(int itower, int itele, int ifront, int iback)
{



  if (itower == 0 && itele == 1) //det0
    {
      if (iback == 20) return false;
      if (iback == 30) return false;
      float x = 1.;

      if (iback == 0)  x *= .86;
      if (iback == 15) x *= .79;
      if (iback == 16) x *= .91;
      if (iback == 31) x *= .82;
      if (ifront == 0) x *= .75;
      if (ifront == 15) x*= .68;
      if (ifront == 31) x*= .84;
      if (ran.Rndm() > x) return false;

    }
  else if (itower == 0 && itele == 0)//det1
    {
      float x = 1.;
      if (iback == 0) x *= .87;
      if (iback == 15) x *=.81;
      if (iback == 31) x *= .86;
      if (ifront == 0) x *= .75;
      if (ifront == 15) x*= .69;
      if (ifront == 31) x *= .84;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 1 && itele == 2)//det2
    {
      float x = 1.;
      if (iback == 16) x *= .76;
      if (ifront == 15) x *= .71;
      if (ifront == 31) x *= .92;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 1 && itele == 1) //det3
    {
      float x = 1.;
      if (iback == 0) x *= .86;
      if (iback == 15) x *= .74;
      if (iback == 16) x *= .95;
      if (iback == 31) x *= .85;
      if (ifront == 0) x *= .86;
      if (ifront == 15) x *= .74;
      if (ifront == 16) x *= .96;
      if (ifront == 31) x *= .84;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 1 && itele == 0) //det4
    {
      float x = 1.;
      if (iback == 19) return false;
      if (ifront == 19)  return false;
      if (iback == 0) x *= .86;
      if (iback == 15) x *= .72;
      if (iback == 31) x *= .90;
      if (ifront == 0) x *= .86;
      if (ifront == 15) x *= .72;
      if (ifront == 31) x *= .88;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 2 && itele == 3) //det5
    {
      float x = 1.;
      if (iback == 16) x *= .62;
      if (ifront == 0) x *= .9;
      if (ifront == 15) x *= .82;
      if (ifront == 16) x *= .72;
      if (ifront == 31) x *= .87;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 2 && itele == 2) //det6
    {
      float x  = 1.;
      if (iback == 0) x *= .88;
      if (iback == 16) x *= .75;
      if (iback == 31) x *= .85;
      if (ifront == 0) x *= .81;
      if (ifront == 15) x *= .9;
      if (ifront == 16) x *= .81;
      if (ifront == 31) x *= .82;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 2 && itele == 1) //det7
    {
      if (iback == 14) return false;
      float x = 1.;
      if (iback == 0) x *= .80;
      if (iback == 15) x *= .76;
      if (iback == 31) x *= .87;
      if (ifront == 0) x *= .81;
      if (ifront == 15) x *= .76;
      if (ifront == 16) x *= .9;
      if (ifront == 31) x *= .8;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 2 && itele == 0) //det8
    {
      float x = 1.;
      if (iback == 0) x *= .82;
      if (iback == 15) x *= .78;
      if (iback == 31) x *= .91;
      if (ifront == 0) x *= .86;
      if (ifront == 15) x *= .76;
      if (ifront == 16) x *= .90;
      if (ifront == 31) x *= .83;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 3 && itele == 2) //det9
    {
      if (iback == 27) return false;
      float x = 1.;
      if (iback == 0) x *= .91;
      if (iback == 15) x *= .84;
      if (iback == 31) x *= .86;
      //if (iback > 15 && ifront < 16) x *= .33;
      if (ifront == 0) x *= .87;
      if (ifront == 0) x *= .90;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 3 && itele == 1) //det10
    {
      float x = 1.;
      if (iback == 0) x *= .85;
      if (iback == 15) x *= .74;
      if (iback == 16) x *= .92;
      if (iback == 31) x *= .84;
      if (ifront == 0) x *= .86;
      if (ifront == 16) x *= .71;
      if (ifront == 31) x *= .79;
      if (ran.Rndm() > x) return false;

    }
  else if (itower == 3 && itele == 0) //det11
    {
      float x = 1.;
      if (iback == 0) x*= .83;
      if (iback == 15) x *= .73;
      if (iback == 31) x *= .87;
      if (ifront == 0) x *= .86;
      if (ifront == 15) x *= .78;
      if (ifront == 31) x *= .91;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 4 && itele == 1) //det12
    {
      float x = 1.;
      if (iback == 0) x *= .88;
      if (iback == 31) x *= .90;
      if (ifront == 0) x *= .89;
      if (ifront == 16) x *= .73;
      if (ifront == 31) x *= .84;
      if (ran.Rndm() > x) return false;
    }
  else if (itower == 4 && itele == 0) //det13
    {
      if (iback == 31)  return false;
      float x = 1.;
      if (iback == 0) x *= .82;
      if (iback == 15) x *= .74;
      if (ifront == 0) x *= .94;
      if (ifront == 16) x *= .74;
      if (ifront == 31) x *= .82;
      if (ran.Rndm() > x) return false;
    }





  return true;
}

//**************************************************
bool CFrag::protonHole2(int itele, int ifront, int iback)
{


  if (itele == 0) //det0
    {
      if (iback == 20) return false;
      if (iback == 30) return false;
      if (ifront == 20) return false;
      if (ifront == 30)  return false;

      float x = 1.;

      if (iback == 0) x *= .87;
      if (iback == 15) x *= .74;
      if (iback == 16) x *= .77;
      if (iback == 24) x *= .68;
      if (iback == 31) x *= .88;
      if (ifront == 0) x *= .87;
      if (ifront == 15) x *= .77;
      if (ifront == 16) x *= .77;
      if (ifront == 24) x *= .68;
      if (ifront == 31) x *= .86;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 1)//det1
    {
      float x = 1.;
      if (iback == 0) x *= .84;
      if (iback == 15) x *= .69;
      if (iback == 16) x *= .88;
      if (iback == 18) x *= .95;
      if (iback == 31) x *= .86;
      if (ifront == 0) x *= .87;
      if (ifront == 14) x *= .85;
      if (ifront == 15) x *= .68;
      if (ifront == 31) x *= .89;
      if (ran.Rndm() > x) return false;
    }

  else if (itele == 2)//det2
    {
      float x = 1.;
      if (iback == 0) x *= .98;
      if (iback == 15) x *= .80;
      if (iback == 16) x *= .77;
      if (iback == 17) x*= .87;
      if (iback == 31) x*= .92;
      if (ifront == 0) x*= .91;
      if (ifront == 15) x*= .72;
      if (ifront == 16) x*= .88;
      if (ifront == 31) x*=.94;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 3) //det3
    {
      float x = 1.;
      if (iback == 0) x *= .88;
      if (iback == 15) x*= .67;
      if (iback == 16) x*= .87;
      if (iback == 31) x*= .86;
      if (ifront == 0) x*= .88;
      if (ifront == 15) x*= .68;
      if (ifront == 16) x*= .88;
      if (ifront == 31) x*= .86;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 4) //det4
    {
      if (iback == 19) return false;
      if (ifront == 19)  return false;
      float x = 1.;
      if (iback == 0) x *= .90;
      if (iback == 15) x*= .66;
      if (iback == 31) x*= .91;
      if (ifront == 0) x*=.91;
      if (ifront == 15) x*=.64;
      if (ifront == 31) x*= .89;
      if (ran.Rndm() > x) return false;

    }
  else if (itele == 5) //det5
    {
      float x = 1.;
      if (iback == 0) x*= .87;
      if (iback == 16) x*=.71;
      if (iback == 17) x*=.86;
      if (iback == 31) x*=.81;
      if (ifront == 0) x*=.91;
      if (ifront == 14) x*=.96;
      if (ifront == 15) x*=.76;
      if (ifront == 16) x*=.69;
      if (ifront == 31) x*=.91;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 6) //det 6
    {
      float x = 1.;
      if (iback == 0) x*= .86;
      if (iback == 16) x*=.70;
      if (iback == 31) x*=.72;
      if (ifront == 0) x*=.83;
      if (ifront == 15) x*=.81;
      if (ifront == 16) x*=.71;
      if (ifront == 31) x*=.85;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 7) //det 7
    {
      if (iback == 4) return false;
      float x = 1.;
      if (iback == 0) x*= .86;
      if (iback == 15) x*=.66;
      if (iback == 16) x*=.85;
      if (iback == 31) x*=.66;
      if (ifront == 0) x*=.86;
      if (ifront == 15) x*=.71;
      if (ifront == 16) x*=.81;
      if (ifront == 31) x*=.83;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 8) //det 8
    {
      float x = 1.;
      if (iback == 0) x *= .83;
      if (iback == 14) x*=.89;
      if (iback == 15) x*=.66;
      if (iback == 31) x*=.87;
      if (ifront == 0) x*=.86;
      if (iback == 15) x*=.71;
      if (iback == 16) x*=.81;
      if (iback == 31) x*=.83;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 9) //det 9
    {
      if (iback == 27) return false;
      float x = 1.;
      if (iback == 0) x *= .93;
      if (iback == 15) x*= .78;
      if (iback == 31) x*=.85;
      //if (iback > 15 && ifront < 16) x*=.26;
      if (ifront == 0)x*=.92;
      if (ifront == 31)x*=.95;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 10) //det 10
    {
      float x = 1.;
      if (iback == 0) x *= .89;
      if (iback == 15) x*= .68;
      if (iback == 16) x*= .81;
      if (iback == 31) x*= .86;
      if (ifront == 0) x*=.89;
      if (ifront == 15) x*=.90;
      if (ifront == 16) x*=.62;
      if (ifront == 17) x*=.94;
      if (ifront == 31) x*=.86;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 11) //det 11
    {
      float x = 1.;
      if (iback == 0) x*= .87;
      if (iback == 14) x*=.93;
      if (iback == 15) x*=.63;
      if (iback == 16) x*=.94;
      if (iback == 31) x*=.89;
      if (ifront == 0) x*=.92;
      if (ifront == 15) x*=.67;
      if (ifront == 16) x*= .90;
      if (ifront == 31) x*=.91;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 12) //det 11
    {
      float x = 1.;
      if (iback == 0) x*= .89;
      if (iback == 15) x*= .88;
      if (iback == 16) x*=.75;
      if (iback == 31) x*=.90;
      if (ifront == 0) x*=.92;
      if (ifront == 16) x*=.71;
      if (ifront == 17) x*=.83;
      if (ifront == 31) x*=.84;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 13) //det 13
    {
      if (iback == 31) return false;
      float x = 1.;
      if (iback == 0) x*=.86;
      if (iback == 9) x*= .42;
      if (iback == 15) x*=.67;
      if (iback == 16) x*=.90;
      if (ifront == 0) x*=.93;
      if (ifront == 16) x*=.68;
      if (ifront == 17) x*=.83;
      if (ifront == 31) x*=.87;
      if (ran.Rndm() > x) return false;
    }

  return true;
}
//********************************************
bool CFrag::alphaHole2(int itele, int ifront, int iback)
{



  if (itele == 0) //det0
    {
      if (iback == 20) return false;
      if (iback == 30) return false;
      float x = 1.;

      if (iback == 0)  x *= .86;
      if (iback == 15) x *= .79;
      if (iback == 16) x *= .91;
      if (iback == 31) x *= .82;
      if (ifront == 0) x *= .75;
      if (ifront == 15) x*= .68;
      if (ifront == 31) x*= .84;
      if (ran.Rndm() > x) return false;

    }
  else if (itele == 1)//det1
    {
      float x = 1.;
      if (iback == 0) x *= .87;
      if (iback == 15) x *=.81;
      if (iback == 31) x *= .86;
      if (ifront == 0) x *= .75;
      if (ifront == 15) x*= .69;
      if (ifront == 31) x *= .84;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 2)//det2
    {
      float x = 1.;
      if (iback == 16) x *= .76;
      if (ifront == 15) x *= .71;
      if (ifront == 31) x *= .92;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 3) //det3
    {
      float x = 1.;
      if (iback == 0) x *= .86;
      if (iback == 15) x *= .74;
      if (iback == 16) x *= .95;
      if (iback == 31) x *= .85;
      if (ifront == 0) x *= .86;
      if (ifront == 15) x *= .74;
      if (ifront == 16) x *= .96;
      if (ifront == 31) x *= .84;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 4) //det4
    {
      float x = 1.;
      if (iback == 19) return false;
      if (ifront == 19)  return false;
      if (iback == 0) x *= .86;
      if (iback == 15) x *= .72;
      if (iback == 31) x *= .90;
      if (ifront == 0) x *= .86;
      if (ifront == 15) x *= .72;
      if (ifront == 31) x *= .88;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 5) //det5
    {
      float x = 1.;
      if (iback == 16) x *= .62;
      if (ifront == 0) x *= .9;
      if (ifront == 15) x *= .82;
      if (ifront == 16) x *= .72;
      if (ifront == 31) x *= .87;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 6) //det6
    {
      float x  = 1.;
      if (iback == 0) x *= .88;
      if (iback == 16) x *= .75;
      if (iback == 31) x *= .85;
      if (ifront == 0) x *= .81;
      if (ifront == 15) x *= .9;
      if (ifront == 16) x *= .81;
      if (ifront == 31) x *= .82;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 7) //det7
    {
      if (iback == 14) return false;
      float x = 1.;
      if (iback == 0) x *= .80;
      if (iback == 15) x *= .76;
      if (iback == 31) x *= .87;
      if (ifront == 0) x *= .81;
      if (ifront == 15) x *= .76;
      if (ifront == 16) x *= .9;
      if (ifront == 31) x *= .8;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 8) //det8
    {
      float x = 1.;
      if (iback == 0) x *= .82;
      if (iback == 15) x *= .78;
      if (iback == 31) x *= .91;
      if (ifront == 0) x *= .86;
      if (ifront == 15) x *= .76;
      if (ifront == 16) x *= .90;
      if (ifront == 31) x *= .83;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 9) //det9
    {
      if (iback == 27) return false;
      float x = 1.;
      if (iback == 0) x *= .91;
      if (iback == 15) x *= .84;
      if (iback == 31) x *= .86;
      //if (iback > 15 && ifront < 16) x *= .33;
      if (ifront == 0) x *= .87;
      if (ifront == 0) x *= .90;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 10) //det10
    {
      float x = 1.;
      if (iback == 0) x *= .85;
      if (iback == 15) x *= .74;
      if (iback == 16) x *= .92;
      if (iback == 31) x *= .84;
      if (ifront == 0) x *= .86;
      if (ifront == 16) x *= .71;
      if (ifront == 31) x *= .79;
      if (ran.Rndm() > x) return false;

    }
  else if (itele == 11) //det11
    {
      float x = 1.;
      if (iback == 0) x*= .83;
      if (iback == 15) x *= .73;
      if (iback == 31) x *= .87;
      if (ifront == 0) x *= .86;
      if (ifront == 15) x *= .78;
      if (ifront == 31) x *= .91;
      if (ran.Rndm() > x) return false;
    }
  else if (itele == 12) //det12
    {
      float x = 1.;
      if (iback == 0) x *= .88;
      if (iback == 31) x *= .90;
      if (ifront == 0) x *= .89;
      if (ifront == 16) x *= .73;
      if (ifront == 31) x *= .84;
      if (ran.Rndm() > x) return false;
    }
  else if ( itele == 13) //det13
    {
      if (iback == 31)  return false;
      float x = 1.;
      if (iback == 0) x *= .82;
      if (iback == 15) x *= .74;
      if (ifront == 0) x *= .94;
      if (ifront == 16) x *= .74;
      if (ifront == 31) x *= .82;
      if (ran.Rndm() > x) return false;
    }





  return true;
}

//**********************************************************
  /**
   * logical function determines if a particle is detected
\param xTarget is in-plane location of interection in target form nomimal center
\param yTarget is out-of-plane location (cm)
  */
int CFrag::hit3()
{

  is_hit = Ring->hit(real->theta,real->phi);
  float CsI1 = RingCsI->hit(real->theta,real->phi); // I think I need at least something calling the hit function so that which CsI strip is hit will actually be calculated


  // cout << "csistrip1 = " << RingCsI->CsIstrip << endl;

  if (!is_hit) return is_hit;

  if (is_hit)
    {

      recon->theta = Ring->thetaHit;
      recon->phi = Ring->phiHit;

      real->theta= recon->theta;
      real->phi= recon->phi;

     recon->energy = real->energy + sqrt(real->energy)*CsI_res*
       ran.Gaus(0.,1.);
     

     recon->getVelocity();

     

    }

  return is_hit;
}
int CFrag::hit4()
{
  is_hit = 0;
  is_hit2= 0;
  is_hit = TTT->hit(real->theta,real->phi);
  is_hit2 = TTT2->hit(real->theta,real->phi);
  float csi1 = TTT3->hit(real->theta,real->phi);
  float csi2 = TTT4->hit(real->theta,real->phi);
  // cout << "csi1 = " << csi1 << endl;
  // cout << "csi2 = " << csi2 << endl;
  
  if (!(is_hit+is_hit2)) return is_hit;

  if (is_hit)
    {
      recon->theta = TTT->thetaHit;
      recon->phi = TTT->phiHit;
      
      recon->energy = real->energy + sqrt(real->energy)*CsI_res*ran.Gaus(0.,1.);
      recon->getVelocity();

      return is_hit;
    }
  if(is_hit2)
    {
      recon->theta = TTT2->thetaHit;
      recon->phi = TTT2->phiHit;
      
      recon->energy = real->energy + sqrt(real->energy)*CsI_res*ran.Gaus(0.,1.);
      recon->getVelocity();
     
      return is_hit2;
    }
    
  // cout <<"x1="<< TTT3->hitx <<" x2="<< TTT4->hitx << endl;
  // cout << "y1=" << TTT3->hity << " y2=" << TTT4->hity << endl;
  // cout << "is_hit2= " << is_hit2 << endl;
  return is_hit;
}
int CFrag::hit5()
{

  is_hit = Ring2->hit(real->theta,real->phi);
  float csi = Ring2CsI->hit(real->theta,real->phi);


  if (!is_hit) return is_hit;

  if (is_hit)
    {

      recon->theta = Ring2->thetaHit;
      recon->phi = Ring2->phiHit;

      // recon->theta = real->theta;
      //  recon->phi = real->phi;

     recon->energy = real->energy + sqrt(real->energy)*CsI_res*
       ran.Gaus(0.,1.);
    

     recon->getVelocity();
    
    }

  return is_hit;
}

//fiddling with the energies might be most prudent here, where I can modify the reconstructed energies to matc the pattern seen in data
//since I'm confident in alpha calibrations (since I have some and "fixed" the problems, perhaps I should try only changing triton energies)
//just changes triton energies now but the shift in energies was angle dependent so I need to introduce some screw up like that

int CFrag::hit6(int is_triton)
{
  is_hit = 0;
  is_hit2 = 0;
  is_hit = Ring->hit(real->theta,real->phi);
  is_hit2 = Ring2->hit(real->theta,real->phi);

  int csi1 =RingCsI->hit(real->theta,real->phi);
  int csi2 = Ring2CsI->hit(real->theta,real->phi);
  if(is_hit && is_hit2)//{cout << "fix hit6 dan" << endl; return 0;}
    {
      cout << "fix hit6 dan" << endl;
      is_hit = Ring->hit(real->theta,real->phi);
      is_hit2=0;
      csi1 = RingCsI->hit(real->theta,real->phi);
      csi2 = 0;
    }
  float E_screwup1= 1.0;//0.975;//1.0;//0.975;//1.05; //1.02;
  float E_screwup2= 0.0;//-0.06;//0.0;//-0.06;//2.5;//.06;
  // cout << "is_triton = " << is_triton << endl;
  float xy;



  //if (csi1==1 && is_hit==0 ) cout << "NO GOOD!" << endl;
  
  if (!(is_hit+is_hit2)) return is_hit;

  if (is_hit)
    {
      recon->theta = Ring->thetaHit;
      recon->phi = Ring->phiHit;
      if(is_triton)
	{recon->energy = E_screwup1*real->energy+E_screwup2 + sqrt(real->energy)*CsI_res*ran.Gaus(0.,1.);}
      else
	{recon->energy = real->energy + sqrt(real->energy)*CsI_res*ran.Gaus(0.,1.);}
      recon->getVelocity();
      velocity = recon->getVelocity();
      //cout << sqrt(real->energy)*CsI_res*ran.Gaus(0.,1.);

      float dist = Ring->dist;
      xy = dist*sin(Ring->thetaHit);

      // cout << "xy = " << xy << endl;
      //if ((xy>14.00)&&(xy<15))return 0; // just to prevent any events hitting the dead layer on russian being "detected" by the S2

      return is_hit;
    }
  else if(is_hit2)
    {
      recon->theta = Ring2->thetaHit;
      recon->phi = Ring2->phiHit;
      if(is_triton)
	{recon->energy = E_screwup1*real->energy+E_screwup2 + sqrt(real->energy)*CsI_res*ran.Gaus(0.,1.);}
      else
	{recon->energy = real->energy + sqrt(real->energy)*CsI_res*ran.Gaus(0.,1.);}
      recon->getVelocity();
      velocity = recon->getVelocity();
      float dist = Ring->dist;
      xy = dist*sin(Ring->thetaHit);

      // cout << "xy = " << xy << endl;
      //if ((xy>14.00)&&(xy<15))return 0; // just to prevent any events hitting the dead layer on russian being "detected" by the S2
      return is_hit2;
    }

  //below lines for resolution determination
    

  return is_hit;
}

int CFrag::hit7()
{
  is_hit = 0;
  is_hit2 = 0;
  is_hit = Ring->hit(real->theta,real->phi);
  is_hit2 = TTT->hit(real->theta,real->phi);
  int csi1 =RingCsI->hit(real->theta,real->phi);
  //int csi2 = Ring2CsI->hit(real->theta,real->phi);

  //if (csi1==1 && is_hit==0 ) cout << "NO GOOD!" << endl;
  
  if (!(is_hit+is_hit2))  return is_hit;

  if(is_hit+is_hit2==2)// Rect. Silicon is infront so if they overlap it only returns silicon, will have to change this depending on which is in front. 
    {
      recon->theta = TTT->thetaHit;
      recon->phi = TTT->phiHit;
      
      recon->energy = real->energy + sqrt(real->energy)*CsI_res/10*ran.Gaus(0.,1.);//energy resolution in silicon is veryu good
      recon->getVelocity();
      velocity = recon->getVelocity();
      // float dist = Ring->dist;
      //float xy = dist*sin(Ring->thetaHit);
       // cout << "xy = " << xy << endl;
      //if ((xy>14.00)&&(xy<15.00))return 0; // just to prevent any events hitting the dead layer on russian being "detected" by the S2
      return is_hit2;
    }

  if (is_hit)
    {
      recon->theta = Ring->thetaHit;
      recon->phi = Ring->phiHit;
      
      recon->energy = real->energy + sqrt(real->energy)*CsI_res*ran.Gaus(0.,1.);
      recon->getVelocity();
      velocity = recon->getVelocity();
      return is_hit;
    }
  if(is_hit2)
    {
      recon->theta = TTT->thetaHit;
      recon->phi = TTT->phiHit;
      
      recon->energy = real->energy + sqrt(real->energy)*CsI_res/10*ran.Gaus(0.,1.);//energy resolution in silicon is veryu good
      recon->getVelocity();
      velocity = recon->getVelocity();
      //   float dist = Ring->dist;
      // float xy = dist*sin(Ring->thetaHit);
       // cout << "xy = " << xy << endl;
      // if ((xy>14.00)&&(xy<15.00))return 0; // just to prevent any events hitting the dead layer on russian being "detected" by the S2
      return is_hit2;
    }
    

  return is_hit;
}
